@page "/users"
@page "/users/{searchTerm}"
@page "/users/{searchTerm}/office/{userOffice}/entrydate/{userLength:int}"


<PageTitle>Usuarios - Project Tescatlipoca</PageTitle>

<UserHomePageLayout>





    @if (SearchTerm != null || UserOffice != null || UserLength != null)
    {
        <NavLink href="users" Match="NavLinkMatch.All">
            <i class="bi bi-arrow-left" style="font-size:2rem; margin-top:-1rem"></i>
        </NavLink>
    }
    else
    {
        <h1 style="padding-left: 5px; margin:3.625rem 0 1rem .25rem; ">Usuarios</h1>
    }


    <div style="display: flex; margin-top:1rem; flex-direction:column;">
        @if (Users != null && SearchTerm != null)
        {




            <div style="height:2rem; display:flex; align-items:center; width:100%; margin-bottom:1.25%;">

                <h4 style="margin-top: 1%;  margin-right: .25%">

                    <i class="material-symbols-outlined search-icon " style="font-size:1.6rem;">search</i>

                </h4>

                <i style="margin-left: 4px;">Resultados para:</i>
                <i style="color: var(--brand); font-weight:500; font-size:1.25rem; margin-left: 4px; "> @SearchTerm</i>

            </div>


        }

        @if (UserOffice != null || UserLength != null)
        {



            <div style="height:2rem; display:flex; align-items:center; width:100%; ">
                <h4 style="margin-top: 1%;  margin-right: .25%">

                    @*Icono Filtro*@
                    <i style="font-size:1.5rem; color:var(--brand-secondary); " class="bi bi-funnel"></i>

                </h4>
                @if (UserOffice != null)
                {
                    <i>Ciudad:</i> <i style="color: var(--brand); font-weight: 500; font-size: 1.25rem; margin-left: 4px; margin-right: 14px; "> @UserOffice</i>
                }




                @if (UserLength != null)
                {

                    @if (UserLength > 0)
                    {
                        <i style="margin-left: 4px;">Antiguedad mayor a:</i>
                    }
                    @if (UserLength < 0)
                    {
                        <i style="margin-left: 4px;">Antiguedad menor a:</i>
                    }




                    @if (UserLength > 1 || UserLength < -1)
                    {
                        <i style="color: var(--brand); font-weight:500; font-size:1.25rem; margin-left: 4px; "> @Math.Abs(UserLength ?? 0) años </i>
                    }
                    else
                    {
                        <i style="color: var(--brand); font-weight:500; font-size:1.25rem; margin-left: 4px; "> @Math.Abs(UserLength ?? 0) año </i>


                    }

                }
            </div>





        }

    </div>




    <div style="row-gap: 4rem; justify-content: center; display: grid; grid-template-columns: 1fr 1fr 1fr; margin-top:22px">


        @if (Users == null)
        {
            <p>Cargando usuarios...</p>
        }
        else if (!Users.Any())
        {
            <p>No se han encontrado usuarios ☹️</p>
        }
        else
        {



            @foreach (var user in Users)
            {

                <UserCard User="user" />

            }


        }
    </div>


</UserHomePageLayout>


@code {
    private User[]? Users { get; set; }
    private User[]? _cachedUsers { get; set; } = Array.Empty<User>();


    [Parameter]
    public string
    SearchTerm
    { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public string?
    UserOffice
    { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int?
    UserLength
    { get; set; }



    protected override async
    Task OnParametersSetAsync()
    {

        Console.WriteLine("UserOffice: " + UserOffice);
        await DisplayCards();
    }

    protected override async
    Task OnInitializedAsync()
    { await DisplayCards(); }


    private async Task DisplayCards()
    {

        try
        {
            using var context = ContextFactory.CreateDbContext();

            await GetAllUSers(context);

            if (SearchTerm is not null)
            {
                await UpdateSearch(context);
            }
            if (UserOffice is not null || UserLength is not null)
            {
                UpdateFilters();
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hubo un problema al cargar la informacion de los usuarios{ex.Message}");
        }
    }


    private async
    Task GetAllUSers(MainDbContext context) => Users = await context.Users.ToArrayAsync();



    private async
    Task UpdateSearch(MainDbContext context)
    {

        if (!string.IsNullOrEmpty(SearchTerm))
        {
            var searchTermLower = SearchTerm.ToLower();


            var query = context.Users
            .Where
                (
                x =>

                x.NAME.ToLower()
                .Contains
                (searchTermLower) ||

                x.POSITION.ToLower()
                .Contains
                (searchTermLower) ||

                x.DEPT.ToLower()
                .Contains
                (searchTermLower) ||

                x.CEL.ToString()
                .Contains
                (searchTermLower) ||

                x.TEL.ToString()
                .Contains
                (searchTermLower)

            );

            Users = await query.ToArrayAsync();
        }
        else
        {
            Users = null;
        }

        _cachedUsers = Users;
        StateHasChanged();

    }


    private void
    UpdateFilters()
    {

        @*    if (Users == null)
        {
            Users = _cachedUsers;
        }*@

        var filters = new List<Func<User, bool>>();

        if (!string.IsNullOrEmpty(UserOffice))
        {
            filters.Add(x =>
              x.OFFICE?.Contains(UserOffice, StringComparison.CurrentCultureIgnoreCase) == true);
        }

        Console.WriteLine("UserOffice: " + UserOffice);

        if (UserLength.HasValue)
        {
            var currentDate = DateTime.Now;

            // Add a filter based on the NON_NULL_ENTRY_DATE.
            if (UserLength.Value >= 0)
            {
                filters.Add(x =>
                {
                    // Check if NON_NULL_ENTRY_DATE is at its default value
                    if (x.NON_NULL_ENTRY_DATE == DateTime.MinValue)
                    {
                        return false;
                    }

                    return (currentDate - x.NON_NULL_ENTRY_DATE).TotalDays / 365.25 > UserLength.Value;
                });
            }
            else
            {
                filters.Add(x =>
                {
                    // Check if NON_NULL_ENTRY_DATE is at its default value
                    if (x.NON_NULL_ENTRY_DATE == DateTime.MinValue)
                    {
                        return false; // or handle accordingly
                    }

                    return (currentDate - x.NON_NULL_ENTRY_DATE).TotalDays / 365.25 < Math.Abs(UserLength.Value);
                });
            }
        }



        if (filters.Any())
        {
            Users = Users?.Where(user => filters.All(filter => filter(user))).ToArray();
        }
        else
        {
            Users = _cachedUsers;
        }


        StateHasChanged();

    }


}
