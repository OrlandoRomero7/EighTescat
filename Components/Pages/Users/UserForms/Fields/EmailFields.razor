@using TescatGlobalServer.Helpers
@if (Emails is not null)
{

    @if (accountOneDisplay)
    {
        <div class="row mb-3">

            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-bold text-secondary">
                        Email

                    </label>
                    <p class="font-weight-bold  text-secondary">1</p>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <FormFieldSet Width="col" Label="Usuario">
                        <InputText class="form-control" @bind-Value="Emails.EMAIL_1" />
                        <ValidationMessage For="() => Emails.EMAIL_1" />
                    </FormFieldSet>

                </div>
            </div>

            <div class="col">
                <div class="form-group">
                    <FormFieldSet Width="col" Label="Contraseña">
                        <div class="input-group mb-3">
                            <InputText  class="form-control" type="@inputType" @bind-Value="Emails.PASS_1" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="()=>TogglePasswordVisibility(1)">
                                    <i class="@iconClass"></i>
                                </button>
                            </div>
                        </div>

                        <ValidationMessage For="() => Emails.PASS_1" />
                    </FormFieldSet>
                </div>
            </div>


            <div class="col-1 d-flex mt-3">
                <button class="btn btn-link" type="button" @onclick="() => RemoveAccount(1)">
                    <svg width="1em" height="1em" viewBox="0 0 16 16"
                         class="bi bi-x-circle-fill text-danger"
                         fill="currentColor"
                         xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                    </svg>
                </button>

            </div>

        </div>

    }


    @if (accountTwoDisplay)
    {
        <div class="row mb-3">

            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-bold text-secondary">
                        Email

                    </label>
                    <p class="font-weight-bold  text-secondary">2</p>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <FormFieldSet Width="col" Label="Usuario">
                        <InputText class="form-control" @bind-Value="Emails.EMAIL_2" />
                        <ValidationMessage For="() => Emails.EMAIL_2" />
                    </FormFieldSet>

                </div>
            </div>

            <div class="col">
                <div class="form-group">
                    <FormFieldSet Width="col" Label="Contraseña">
                        <div class="input-group mb-3">
                            <InputText class="form-control" type="@inputType2" @bind-Value="Emails.PASS_2" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="()=>TogglePasswordVisibility(2)">
                                    <i class="@iconClass2"></i>
                                </button>
                            </div>
                        </div>
                        <ValidationMessage For="() => Emails.PASS_2" />
                    </FormFieldSet>
                </div>
            </div>


            <div class="col-1 d-flex mt-3">
                <button class="btn btn-link" type="button" @onclick="() => RemoveAccount(2)">
                    <svg width="1em" height="1em" viewBox="0 0 16 16"
                         class="bi bi-x-circle-fill text-danger"
                         fill="currentColor"
                         xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                    </svg>
                </button>

            </div>

        </div>

    }


    @if (accountThreeDisplay)
    {
        <div class="row mb-3">

            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-bold text-secondary">
                        Email

                    </label>
                    <p class="font-weight-bold  text-secondary">3</p>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <FormFieldSet Width="col" Label="Usuario">
                        <InputText class="form-control" @bind-Value="Emails.EMAIL_3" />
                        <ValidationMessage For="() => Emails.EMAIL_3" />
                    </FormFieldSet>

                </div>
            </div>

            <div class="col">
                <div class="form-group">
                    <FormFieldSet Width="col" Label="Contraseña">
                        <div class="input-group mb-3">
                            <InputText id="password" class="form-control" type="@inputType3" @bind-Value="Emails.PASS_3" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="()=>TogglePasswordVisibility(3)">
                                    <i class="@iconClass3"></i>
                                </button>
                            </div>
                        </div>
                        
                        <ValidationMessage For="() => Emails.PASS_3" />
                    </FormFieldSet>
                </div>
            </div>


            <div class="col-1 d-flex mt-3">
                <button class="btn btn-link" type="button" @onclick="() => RemoveAccount(3)">
                    <svg width="1em" height="1em" viewBox="0 0 16 16"
                         class="bi bi-x-circle-fill text-danger"
                         fill="currentColor"
                         xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                    </svg>
                </button>

            </div>

        </div>

    }

}


@if (accountCounter < 3)
{
    <div class="row">
        <div class="col">
            <button class="btn btn-outline-primary"
                    type="button" @onclick="()=>AddAccount()">
                Agregar Email
            </button>
        </div>
    </div>

}




@code {


    [Parameter]
    public UserEmails? Emails { get; set; }

    private bool accountOneDisplay;
    private bool accountTwoDisplay;
    private bool accountThreeDisplay;

    private int accountCounter;
    @*varaibles necesarias para la encriptacion*@
    public Dictionary<string, string> variables = new Dictionary<string, string>();
    public string passTemp;
    public string initialStatePass1;
    public string initialStatePass2;
    public string initialStatePass3;
    



    protected override void OnInitialized()
    {

        if (!String.IsNullOrEmpty(Emails.EMAIL_1) || !String.IsNullOrEmpty(Emails.PASS_1))
        {
            accountOneDisplay = true;
            accountCounter = 1;
            initialStatePass1 = Emails.PASS_1;
            //se necesita saber el estado inicial del password
            //variables["initialStatePass1"] = Emails.PASS_1;
        }
        if (!String.IsNullOrEmpty(Emails.EMAIL_2) || !String.IsNullOrEmpty(Emails.PASS_2))
        {
            accountOneDisplay = true;
            accountTwoDisplay = true;
            accountCounter = 2;
            initialStatePass2 = Emails.PASS_2;
            //variables["initialStatePass2"] = Emails.PASS_2;
        }
        if (!String.IsNullOrEmpty(Emails.EMAIL_3) || !String.IsNullOrEmpty(Emails.PASS_3))
        {
            accountOneDisplay = true;
            accountTwoDisplay = true;
            accountThreeDisplay = true;
            accountCounter = 3;
            initialStatePass3 = Emails.PASS_3;
            //variables["initialStatePass3"] = Emails.PASS_3;
        }
    }
    protected override void OnParametersSet()
    {
        //if (initalStatePass1 != Emails.PASS_1)
        if (string.IsNullOrEmpty(Emails.PASS_1))
        {
            initialStatePass1 = String.Empty;
        }
        if (string.IsNullOrEmpty(Emails.PASS_2))
        {
            initialStatePass2 = String.Empty;
        }
        if (string.IsNullOrEmpty(Emails.PASS_3))
        {
            initialStatePass3 = String.Empty;
        }
        // if (string.IsNullOrEmpty(Emails.PASS_3))
        // {
        //     initalStatePass3 = String.Empty;
        // }


        // if (!string.IsNullOrEmpty(Emails.PASS_1) && initalStatePass1 != Emails.PASS_1)
        // {
        //     initalStatePass1 = Emails.PASS_1;
        //     //Console.WriteLine(Emails.PASS_1);
        //     if (inputType == "text")
        //     {
        //         Console.WriteLine("Desde EmailFields"+Emails.PASS_1);
        //         Console.WriteLine("Desde EmailFieldsInitial" + initalStatePass1);
        //         //AlgorithmAES.DecryptString(Emails.PASS_1);
        //     }
        // }
        // if (!string.IsNullOrEmpty(Emails.PASS_1) && initalStatePass1 != Emails.PASS_1)
        // {
        //     initalStatePass1 = Emails.PASS_1;

        //     if (inputType == "text")
        //     {
        //         Console.WriteLine("Desde EmailFields"+Emails.PASS_1);
        //         Console.WriteLine("Desde EmailFieldsInitial" + initalStatePass1);
        //         AlgorithmAES.DecryptString(Emails.PASS_1);
        //     }
        // }
    }

    private void activatingAccounts()
    {
        if (accountCounter >= 1)
        {
            accountOneDisplay = true;

        }
        if (accountCounter >= 2)
        {
            accountTwoDisplay = true;

        }
        if (accountCounter >= 3)
        {
            accountThreeDisplay = true;

        }
    }


    private void AddAccount()
    {
        if (accountCounter < 3)
        {
            if (!accountOneDisplay)
            {
                accountCounter = 1;

            }
            else if (!accountTwoDisplay)
            {
                accountCounter = 2;
            }
            else if (!accountThreeDisplay)
            {
                accountCounter = 3;
            }

        }

        activatingAccounts();

        //StateHasChanged();


    }

    private void RemoveAccount(int emailNumber)
    {

        if (emailNumber == 1)
        {
            accountOneDisplay = false;
            accountCounter = 0;
            Emails.EMAIL_1 = null;
            Emails.PASS_1 = null;
        }

        if (emailNumber == 2)
        {
            accountTwoDisplay = false;
            accountCounter = 1;
            Emails.EMAIL_2 = null;
            Emails.PASS_2 = null;
        }
        if (emailNumber == 3)
        {
            accountThreeDisplay = false;
            accountCounter = 2;
            Emails.EMAIL_3 = null;
            Emails.PASS_3 = null;
        }


        //StateHasChanged();

    }
    private string inputType = "password";
    private string iconClass = "bi bi-eye";
    private string inputType2 = "password";
    private string iconClass2 = "bi bi-eye";
    private string inputType3 = "password";
    private string iconClass3 = "bi bi-eye";

    public string initalStatePass = "";
    public string email;
    public string initialState;
    public string inputTypeUniv;

    public void TogglePasswordVisibility(int number)
    {
        switch (number)
        {
            case 1:
                email = Emails.PASS_1;
                initialState = initialStatePass1;
                inputTypeUniv = inputType;
                //emailToBind = $"Email.PASS_{1}";
                break;
            case 2:
                email = Emails.PASS_2;
                initialState = initialStatePass2;
                inputTypeUniv = inputType2;
                break;
            case 3:
                email = Emails.PASS_3;
                initialState = initialStatePass3;
                inputTypeUniv = inputType3;
                break;
        }
        if (inputTypeUniv == "password")
        {
            if (!string.IsNullOrEmpty(initialState))
            {
                passTemp = AlgorithmAES.DecryptString(email);
                if (!string.IsNullOrEmpty(passTemp))
                {
                    if (number == 1) inputType = "text";
                    if (number == 2) inputType2 = "text";
                    if (number == 3) inputType3 = "text";
                    AssignPassTemp(number, passTemp);
                    //Emails.PASS_1 = passTemp;
                }
            }
            else
            {
                if (number == 1) inputType = "text";
                if (number == 2) inputType2 = "text";
                if (number == 3) inputType3 = "text";
            }
        }
        else
        {
            if (string.IsNullOrEmpty(initialState))
            {
                if (number == 1) inputType = "password";
                if (number == 2) inputType2 = "password";
                if (number == 3) inputType3 = "password";
            }
            else
            {
                if (number == 1) inputType = "password";
                if (number == 2) inputType2 = "password";
                if (number == 3) inputType3 = "password";
                ReturnStateInitial(number,initialState);
                //Emails.PASS_1 = initialState;
            }
        }
        if (number == 1) iconClass = inputType == "password" ? "bi bi-eye" : "bi bi-eye-slash";
        if (number == 2) iconClass2 = inputType2 == "password" ? "bi bi-eye" : "bi bi-eye-slash";
        if (number == 3) iconClass3 = inputType3 == "password" ? "bi bi-eye" : "bi bi-eye-slash";


    }
    public void AssignPassTemp(int number, string passTemp)
    {
        switch (number)
        {
            case 1:
                Emails.PASS_1 = passTemp;
                break;
            case 2:
                Emails.PASS_2 = passTemp;
                break;
            case 3:
                Emails.PASS_3 = passTemp;
                break;
        }

    }
    public void ReturnStateInitial(int number,string initialState)
    {
        switch (number)
        {
            case 1:
                Emails.PASS_1 = initialState;
                break;
            case 2:
                Emails.PASS_2 = initialState;
                break;
            case 3:
                Emails.PASS_3 = initialState;
                break;
        }
    }



}