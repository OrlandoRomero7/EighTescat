@using TescatGlobalServer.Helpers
<div class="row mb-3">
    <h6>Editar Credenciales</h6>

    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Seleccionar
        </button>

        <ul class="dropdown-menu">

            @if (!credentialPortalInput && Credentials.PORTAL_USER is null)
            {

                <li>
                    <p class="dropdown-item" style="cursor:pointer" @onclick="(() => credentialPortalInput = true)">Portal Web <i class="bi bi-pencil-square"></i></p>
                </li>

            }

            @if (!credentialCasaInput && Credentials.CASA_USER is null)
            {
                <li><p class="dropdown-item" style="cursor:pointer" @onclick="(() => credentialCasaInput = true)">CASA <i class="bi bi-pencil-square"></i></p></li>
            }

            @if (!credentialMozartInput && Credentials.MOZART_USER is null)
            {
                <li><p class="dropdown-item" style="cursor:pointer" @onclick="(() => credentialMozartInput = true)">MOZART <i class="bi bi-pencil-square"></i></p></li>
            }

            @if (!credentialDarwinInput && Credentials.DARWIN_USER is null)
            {
                <li><p class="dropdown-item" style="cursor:pointer" @onclick="(() => credentialDarwinInput = true)">DARWIN <i class="bi bi-pencil-square"></i></p></li>
            }

            @if (!credentialOpenVpnInput && Credentials.VPN_USER is null)
            {
                <li><p class="dropdown-item" style="cursor:pointer" @onclick="(() => credentialOpenVpnInput = true)">OpenVPN <i class="bi bi-pencil-square"></i></p></li>
            }
        </ul>

    </div>
</div>


@if (credentialPortalInput || Credentials.PORTAL_USER is not null)
{
    <div class="row mb-3">

        <h6>Portal Web</h6>

        <FormFieldSet Width="col-md-5" Label="Usuario">
            <InputText placeholder="Agregar usuario" id="portal" class="form-control" @bind-Value="Credentials.PORTAL_USER" />
            <ValidationMessage For="() => Credentials.PORTAL_USER" />
        </FormFieldSet>

        <FormFieldSet Width="col-md-5" Label="Contraseña">
            <div class="input-group mb-3">
                <InputText placeholder="Agregar contraseña" id="portal-pass" class="form-control" type="@inputTypeDictionary["portal"]" @bind-Value="Credentials.PORTAL_PASS" maxlength="20" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="@(()=>TogglePasswordVisibility("portal"))">
                        <i class="@iconClassDictionary["portal"]"></i>
                    </button>
                </div>
            </div>
            <ValidationMessage For="() => Credentials.PORTAL_PASS" />
        </FormFieldSet>

        <div class="col-1 d-flex mt-3">
            <button class="btn btn-link" type="button" @onclick="(() => {credentialPortalInput = false;Credentials.PORTAL_USER = null;Credentials.PORTAL_PASS = null;})">
                <svg width="1em" height="1em" viewBox="0 0 16 16"
                     class="bi bi-x-circle-fill text-danger"
                     fill="currentColor"
                     xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                </svg>
            </button>

        </div>

    </div>



}

@if (credentialCasaInput || Credentials.CASA_USER is not null)
{
    <div class="row mb-3">

        <h6>Sistemas CASA</h6>

        <FormFieldSet Width="col-md-5" Label="Usuario">
            <InputText placeholder="Agregar usuario" id="casa" class="form-control" @bind-Value="Credentials.CASA_USER" />
            <ValidationMessage For="() => Credentials.CASA_USER" />
        </FormFieldSet>

        <FormFieldSet Width="col-md-5" Label="Contraseña">
            <div class="input-group mb-3">
                <InputText placeholder="Agregar contraseña" id="casa-pass" class="form-control" type="@inputTypeDictionary["casa"]" @bind-Value="Credentials.CASA_PASS" maxlength="20" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="@(()=>TogglePasswordVisibility("casa"))">
                        <i class="@iconClassDictionary["casa"]"></i>
                    </button>
                </div>
            </div>
            <ValidationMessage For="() => Credentials.CASA_PASS" />
        </FormFieldSet>

        <div class="col-1 d-flex mt-3">
            <button class="btn btn-link" type="button" @onclick="(() => {credentialCasaInput = false;Credentials.CASA_USER=null;Credentials.CASA_PASS=null;})">
                <svg width="1em" height="1em" viewBox="0 0 16 16"
                     class="bi bi-x-circle-fill text-danger"
                     fill="currentColor"
                     xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                </svg>
            </button>

        </div>

    </div>



}

@if (credentialMozartInput || Credentials.MOZART_USER is not null)
{
    <div class="row mb-3">

        <h6>Mozart</h6>

        <FormFieldSet Width="col-md-5" Label="Usuario">
            <InputText placeholder="Agregar usuario" id="mozart" class="form-control" @bind-Value="Credentials.MOZART_USER" />
            <ValidationMessage For="() => Credentials.MOZART_USER" />
        </FormFieldSet>

        <FormFieldSet Width="col-md-5" Label="Contraseña">
            <div class="input-group mb-3">
                <InputText placeholder="Agregar contraseña" id="mozart-pass" class="form-control" type="@inputTypeDictionary["mozart"]" @bind-Value="Credentials.MOZART_PASS" maxlength="20" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="@(()=>TogglePasswordVisibility("mozart"))">
                        <i class="@iconClassDictionary["mozart"]"></i>
                    </button>
                </div>
            </div>
            <ValidationMessage For="() => Credentials.MOZART_PASS" />
        </FormFieldSet>

        <div class="col-1 d-flex mt-3">
            <button class="btn btn-link" type="button" @onclick="(() => {credentialMozartInput = false;Credentials.MOZART_USER=null;Credentials.MOZART_PASS=null;})">
                <svg width="1em" height="1em" viewBox="0 0 16 16"
                     class="bi bi-x-circle-fill text-danger"
                     fill="currentColor"
                     xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                </svg>
            </button>

        </div>
    </div>
}

@if (credentialDarwinInput || Credentials.DARWIN_USER is not null)
{
    <div class="row mb-3">

        <h6>DARWIN</h6>

        <FormFieldSet Width="col-md-5" Label="Usuario">
            <InputText placeholder="Agregar usuario" id="darwin" class="form-control" @bind-Value="Credentials.DARWIN_USER" />
            <ValidationMessage For="() => Credentials.DARWIN_USER" />
        </FormFieldSet>

        <FormFieldSet Width="col-md-5" Label="Contraseña">
            <div class="input-group mb-3">
                <InputText placeholder="Agregar contraseña" id="darwin-pass" class="form-control" type="@inputTypeDictionary["darwin"]" @bind-Value="Credentials.DARWIN_PASS" maxlength="20" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="@(()=>TogglePasswordVisibility("darwin"))">
                        <i class="@iconClassDictionary["darwin"]"></i>
                    </button>
                </div>
            </div>
            <ValidationMessage For="() => Credentials.DARWIN_PASS" />
        </FormFieldSet>

        <div class="col-1 d-flex mt-3">
            <button class="btn btn-link" type="button" @onclick="(() => {credentialDarwinInput = false;Credentials.DARWIN_USER = null;Credentials.DARWIN_PASS = null;})">
                <svg width="1em" height="1em" viewBox="0 0 16 16"
                     class="bi bi-x-circle-fill text-danger"
                     fill="currentColor"
                     xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                </svg>
            </button>

        </div>

    </div>
}

@if (credentialOpenVpnInput || Credentials.VPN_USER is not null)
{
    <div class="row mb-3">

        <h6>OPENVPN</h6>

        <FormFieldSet Width="col-md-5" Label="Usuario">
            <InputText placeholder="Agregar usuario" id="vpn" class="form-control" @bind-Value="Credentials.VPN_USER" />
            <ValidationMessage For="() => Credentials.VPN_USER" />
        </FormFieldSet>

        <FormFieldSet Width="col-md-5" Label="Contraseña">
            <div class="input-group mb-3">
                <InputText placeholder="Agregar contraseña" id="vpn-pass" class="form-control" type="@inputTypeDictionary["openvpn"]" @bind-Value="Credentials.VPN_PASS" maxlength="20" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="@(()=>TogglePasswordVisibility("openvpn"))">
                        <i class="@iconClassDictionary["openvpn"]"></i>
                    </button>
                </div>
            </div>
            <ValidationMessage For="() => Credentials.VPN_PASS" />
        </FormFieldSet>

        <div class="col-1 d-flex mt-3">
            <button class="btn btn-link" type="button" @onclick="(() => {credentialOpenVpnInput = false;Credentials.VPN_USER=null;Credentials.VPN_PASS=null;})">
                <svg width="1em" height="1em" viewBox="0 0 16 16"
                     class="bi bi-x-circle-fill text-danger"
                     fill="currentColor"
                     xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0
                        8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1
                        0-.708.708L7.293 8l-2.647 2.646a.5.5
                        0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0
                        .708-.708L8.707 8l2.647-2.646a.5.5 0 0
                        0-.708-.708L8 7.293 5.354 4.646z" />
                </svg>
            </button>

        </div>



    </div>
}

@code {
    [Parameter]
    public UserCredentials? Credentials { get; set; }

    //credentials menu options
    private bool credentialPortalInput;
    private bool credentialCasaInput;
    private bool credentialMozartInput;
    private bool credentialDarwinInput;
    private bool credentialOpenVpnInput;

    //
    private string account;
    //private string inputType = "password";
    private string iconClassPortal = "bi bi-eye";
    private string iconClassCasa = "bi bi-eye";
    private string initialState;
    private string passTemp;
    private string initialStatePortal;
    private string initialStateCasa;
    private string initialStateMozart;
    private string initialStateDarwin;
    private string initialStateOpenVpn;
    private List<string> accountList = ["portal", "casa", "mozart", "darwin", "openvpn"];
    Dictionary<string, string> inputTypeDictionary = new Dictionary<string, string>();
    Dictionary<string, string> iconClassDictionary = new Dictionary<string, string>();
    //Dictionary<string, string> initialStateDictionary = new Dictionary<string, string>();
    Dictionary<string, string> passwordAttributes;

    private string inputTypeUniv;
    private int count = 0;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        foreach (var account in accountList)
        {
            inputTypeDictionary.Add(account, "password");
            iconClassDictionary.Add(account, "bi bi-eye");
        }
        // PropertyInfo[] properties = typeof(UserCredentials).GetProperties();
        // foreach (var property in properties)
        // {
        //     if (property.Name.EndsWith("_PASS")
        //     {
        //         initialStateDictionary.Add(accountList[count],property);
        //         count++;
        //     }
        // }
        initialStatePortal = Credentials.PORTAL_PASS;
        initialStateCasa = Credentials.CASA_PASS;
        initialStateMozart = Credentials.MOZART_PASS;
        initialStateDarwin = Credentials.DARWIN_PASS;
        initialStateOpenVpn = Credentials.VPN_PASS;

    }
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Credentials.PORTAL_PASS) && initialStatePortal != Credentials.PORTAL_PASS)
        {
            initialStatePortal = Credentials.PORTAL_PASS;
            if (inputTypeDictionary["portal"] == "text")
            {
                inputTypeDictionary["portal"] = "password";
            }
        }
        if (!string.IsNullOrEmpty(Credentials.CASA_PASS) && initialStateCasa != Credentials.CASA_PASS)
        {
            initialStateCasa = Credentials.CASA_PASS;
            if (inputTypeDictionary["casa"] == "text")
            {
                inputTypeDictionary["casa"] = "password";
            }
        }
        if (!string.IsNullOrEmpty(Credentials.MOZART_PASS) && initialStateMozart != Credentials.MOZART_PASS)
        {
            initialStateMozart = Credentials.MOZART_PASS;
            if (inputTypeDictionary["mozart"] == "text")
            {
                inputTypeDictionary["mozart"] = "password";
            }
        }
        if (!string.IsNullOrEmpty(Credentials.DARWIN_PASS) && initialStateDarwin != Credentials.DARWIN_PASS)
        {
            initialStateDarwin = Credentials.DARWIN_PASS;
            if (inputTypeDictionary["darwin"] == "text")
            {
                inputTypeDictionary["darwin"] = "password";
            }
        }
        if (!string.IsNullOrEmpty(Credentials.VPN_PASS) && initialStateOpenVpn != Credentials.VPN_PASS)
        {
            initialStateOpenVpn = Credentials.VPN_PASS;
            if (inputTypeDictionary["openvpn"] == "text")
            {
                inputTypeDictionary["openvpn"] = "password";
            }
        }
    }
    public void TogglePasswordVisibility(string accountName)
    {
        WhatAccount(accountName);
        if (inputTypeUniv == "password")
        {
            if (!string.IsNullOrEmpty(initialState))
            {
                passTemp = AlgorithmAES.DecryptString(account);
                if (!string.IsNullOrEmpty(passTemp))
                {
                    AssingInputType(accountName, "text");
                    AssignPassTemp(accountName, passTemp);
                }
            }
            else
            {
                AssingInputType(accountName, "text");
            }
        }
        else
        {
            if (string.IsNullOrEmpty(initialState))
            {
                AssingInputType(accountName, "password");
            }
            else
            {
                AssingInputType(accountName, "password");
                ReturnStateInitial(accountName, initialState);
            }
        }
        AssignIconClass(accountName);
        // if (accountName == "portal") iconClassDictionary["portal"] = inputTypeDictionary["portal"] == "password" ? "bi bi-eye" : "bi bi-eye-slash";
        // if (accountName == "casa") iconClassDictionary["casa"] = inputTypeDictionary["casa"] == "password" ? "bi bi-eye" : "bi bi-eye-slash";
        // if (accountName == "mozart") iconClassDictionary["mozart"] = inputTypeDictionary["mozart"] == "password" ? "bi bi-eye" : "bi bi-eye-slash";
        // if (accountName == "mozart") iconClassDictionary["mozart"] = inputTypeDictionary["mozart"] == "password" ? "bi bi-eye" : "bi bi-eye-slash";
        // if (accountName == "darwin") iconClassDictionary["darwin"] = inputTypeDictionary["darwin"] == "password" ? "bi bi-eye" : "bi bi-eye-slash";
        // if (accountName == "openvpn") iconClassDictionary["openvpn"] = inputTypeDictionary["openvpn"] == "password" ? "bi bi-eye" : "bi bi-eye-slash";
    }

    public void WhatAccount(string accountName)
    {
        //var temp = (accountName + "_pass").ToUpper();
        switch (accountName)
        {
            case "portal":
                account = Credentials.PORTAL_PASS;
                initialState = initialStatePortal;
                inputTypeUniv = inputTypeDictionary["portal"];
                break;
            case "casa":
                account = Credentials.CASA_PASS;
                initialState = initialStateCasa;
                inputTypeUniv = inputTypeDictionary["casa"];
                break;
            case "mozart":
                account = Credentials.MOZART_PASS;
                initialState = initialStateMozart;
                inputTypeUniv = inputTypeDictionary["mozart"];
                break;
            case "darwin":
                account = Credentials.DARWIN_PASS;
                initialState = initialStateDarwin;
                inputTypeUniv = inputTypeDictionary["darwin"];
                break;
            case "openvpn":
                account = Credentials.VPN_PASS;
                initialState = initialStateOpenVpn;
                inputTypeUniv = inputTypeDictionary["openvpn"];
                break;
                
        }
    }
    public void AssingInputType(string accountName, string type)
    {
        inputTypeDictionary[accountName] = type;
    }
    public void AssignPassTemp(string accountName, string passTemp)
    {
        switch (accountName)
        {
            case "portal":
                Credentials.PORTAL_PASS = passTemp;
                break;
            case "casa":
                Credentials.CASA_PASS = passTemp;
                break;
            case "mozart":
                Credentials.MOZART_PASS = passTemp;
                break;
            case "darwin":
                Credentials.DARWIN_PASS = passTemp;
                break;
            case "openvpn":
                Credentials.VPN_PASS = passTemp;
                break;
        }

    }
    public void ReturnStateInitial(string accountName, string initialState)
    {
        switch (accountName)
        {
            case "portal":
                Credentials.PORTAL_PASS = initialState;
                break;
            case "casa":
                Credentials.CASA_PASS = initialState;
                break;
            case "mozart":
                Credentials.MOZART_PASS = initialState;
                break;
            case "darwin":
                Credentials.DARWIN_PASS = initialState;
                break;
            case "openvpn":
                Credentials.VPN_PASS = initialState;
                break;
        }
    }
    public void AssignIconClass(string accountName)
    {
        iconClassDictionary[accountName] = inputTypeDictionary[accountName] == "password" ? "bi bi-eye" : "bi bi-eye-slash";
    }

}