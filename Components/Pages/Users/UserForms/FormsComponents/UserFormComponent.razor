@using Microsoft.AspNetCore.Components.Forms
<EditForm Model="@completeUserData" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <FluentValidationValidator />

    

    @if (User is not null)
    {
        <FormSection Title="Informacion Basica">

            <img src="@GetImagePath()" style="width:12rem; height:12rem; display:block; border-radius:1rem; margin-bottom:1rem; object-fit: cover;">

            <UserPictureUpload @ref="userPictureUploadRef"
                               OnFileUploaded="HandleFileUpload"
                               OnFilePreviewReady="HandleFilePreview"
                               UploadComponentStyle="@HandlingUploadStyles()"
                               ID_USER="@User.ID_USER" />

            @if (User?.IMAGE_NAME != null)
            {

                <button type="button" class="btn btn-danger mt-2" @onclick="RemoveImage" style="width: 8rem;">Quitar Imagen</button>
            }

            <UserFields User="@User" DepartmentsList="@DepartmentsList" OfficeList="@OfficeList" AreasList="@AreasList" />
        </FormSection>
    }


    @if (Emails is not null)
    {
        <FormSection Title="Emails">
            
            <EmailFields Emails="Emails" />

        </FormSection>
    }


    @if (Credentials is not null)
    {
        <FormSection Title="Credenciales">
            <CredentialsFields Credentials="@Credentials" />
        </FormSection>
    }

    @if (User is not null || Emails is not null || Credentials is not null)
    {
        <div class="mt-3">
            @if (IsEdit)
            {
                <button type="submit" class="btn btn-primary" disabled="@IsBusy">Actualizar</button>
                <button type="submit" class="btn btn-outline-danger" @onclick="(() => OnDelete.InvokeAsync(User))" disabled="@IsBusy">Eliminar</button>
                <button type="button" class="btn btn-secondary" @onclick="HandleCancel" disabled="@IsBusy">Cancelar</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary" disabled="@IsBusy">Agregar Usuario</button>
            }
    </div>

    }

</EditForm>




@code {
    [Parameter]
    public bool IsBusy { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }


    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public UserCredentials? Credentials { get; set; }

    [Parameter]
    public UserEmails? Emails { get; set; }

    [Parameter]
    public UserPC? Computers { get; set; }

    private CompleteUserData completeUserData = new CompleteUserData();


    [Parameter]
    public string[]? DepartmentsList { get; set; }
    [Parameter]
    public string[]? OfficeList { get; set; }
    [Parameter]
    public string[]? AreasList { get; set; }




    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<User> OnDelete { get; set; }


    [Parameter]
    public EventCallback<bool> OnCancel { get; set; }


    private string? imageFilePath;

    private string? base64ImagePreview;

    private UserPictureUpload? userPictureUploadRef;


    private string? UploadStyles;


    //private EditContext editContextCompleteUserData;

    private string displaySummary = "display:none";

    private bool isValid = false;

    protected override void OnInitialized()
    {
        // Populate completeUserData instance
        completeUserData.User = User;
        completeUserData.Credentials = Credentials;
        completeUserData.Emails = Emails;
        completeUserData.Computers = Computers;
        // editContextCompleteUserData = new(completeUserData);
        // editContextCompleteUserData.OnFieldChanged += HandleFieldChanged;

    }

    private void HandleFileUpload(string path)
    {
        imageFilePath = path;
        Console.WriteLine("Ruta de la imagen: " + imageFilePath);
        // Aquí puede a signar imageFilePath al modelo de usuario, si es necesario
        if (User is not null)
        {
            User.IMAGE_NAME = imageFilePath;
        }

    }


    private void HandleFilePreview(string base64String)
    {
        base64ImagePreview = base64String;
    }

    private string GetImagePath()
    {

        if (!string.IsNullOrEmpty(base64ImagePreview))
        {
            return base64ImagePreview;
        }
        else if (User?.IMAGE_NAME is not null)
        {
            return $"/Images/{User.IMAGE_NAME}";
        }
        else
        {
            return $"/Images/default.svg";
        }
    }

    private void RemoveImage()
    {
        base64ImagePreview = null;
        imageFilePath = null;
        if (User is not null)
        {
            User.IMAGE_NAME = null;
        }
        userPictureUploadRef?.ClearingFile();
    }

    private string HandlingUploadStyles()
    {
        return
        (!string.IsNullOrEmpty(base64ImagePreview) || (User?.IMAGE_NAME is not null && User.IMAGE_NAME != "default.svg"))
        ? "Cambiar" : "Agregar";
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {


        if (userPictureUploadRef != null)
        {
            await userPictureUploadRef.SubmitImage();
        }

        // Actualizar User.IMAGE_NAME sólo si imageFilePath tiene un valor
        if (User != null && !string.IsNullOrEmpty(imageFilePath))
        {
            User.IMAGE_NAME = imageFilePath;
        }
        
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);

        }

    }


    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }

    }
    
}
