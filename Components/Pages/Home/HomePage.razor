@page "/"
@using ChartJs.Blazor.PieChart
@using Newtonsoft.Json.Linq
@inject IJSRuntime JS
@* @inject IMemoryRamService MemoryRamService
@inject IStorageService StorageService
@inject IPcService PcService *@
@inject NavigationManager NavigationManager

<PageTitle>Inicio - Tescat Software</PageTitle>

<div style="padding: 0 5rem">

    <h1 style="padding-left: 1px; margin:3rem 0 2.75rem .25rem; font-size:2rem;">Estado De Equipos</h1>

    <div style="display:flex;  flex-wrap: wrap; margin-top:4rem">

        <HomeCard Title="" CardIcon="bi bi-hdd">
            @if (!nullStorage)
            {
                <Chart Config="_pieConfig"></Chart>
            }

        </HomeCard>

        <HomeCard Title="" CardIcon="bi bi-memory">
            @if(!nullRAM){
                <Chart Config="_doughtConfig"></Chart>
            }
            
        </HomeCard>

        <HomeCard Title="Bandejas de Entrada" CardMaterialIcon="stacked_inbox">
            Estado de los archivos de correo
        </HomeCard>

        <HomeCard Title="SSD's TBW" CardMaterialIcon="save_as">
            Alto numero de escrituras en discos
        </HomeCard>

    </div>

</div>


@code {
    private PieConfig _pieConfig;
    private PieConfig _doughtConfig;
    //DataItem[] pieStorage;

    private bool nullStorage = true;
    private bool nullRAM = true;

    //menos de 15 %
    int storage15 = 0;
    //menos de 40 %
    int storage11_40 = 0;
    //los restantes
    int storage40 = 0;

    //8 o menos de ram
    int ram8 = 0;
    // 12 de ram
    int ram12 = 0;
    // mas de 12 ram
    int ram16 = 0;



    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        //Se consulta para sacar el porcentaje por disco, no por pc. Y lo que sale en el chart es la cantidad de discos que tienen ese porcentaje
        var AllStorage = await context.Storage
             .Where(pc => pc.AVAILABLE_STRGE != null && pc.TOTAL_STRGE != null && pc.AVAILABLE_STRGE != 0 && pc.TOTAL_STRGE != 0)
            .Select(pc => new
            {
                // pc.MODEL,
                // pc.AVAILABLE_STRGE,
                // pc.USED_STRGE,
                // pc.TOTAL_STRGE,
                Percentage = (pc.AVAILABLE_STRGE * 100) / pc.TOTAL_STRGE
            })
            .ToListAsync();

        //Obtenida la consulta se divide por grupos de porcentaje y se pone en false nullStorage para renderizar la grafica.
        if (AllStorage is not null)
        {
            foreach (var storageItem in AllStorage)
            {
                if (storageItem.Percentage <= 15) storage15++;
                else if (storageItem.Percentage <= 40) storage11_40++;
                else storage40++;
            }
            nullStorage = false;
        }

        //var pcsWithTotalRam = await context.PC.Where(pc => pc.MemoryRams.Any(ram => ram.Size != null && ram.Size > 0) && pc.MemoryRams.Sum(ram => ram.SIZE ?? 0) <= 8)
        // var pcsWithTotalRam = await context.PC
        //     .Where(pc => pc.MemoryRams.Any(ram => ram.SIZE != null && ram.SIZE > 0) && pc.MemoryRams.Sum(ram => ram.SIZE ?? 0) <= 8)
        //     .Select(pc => new 
        //         {
        //             TotalRamCapacity = pc.MemoryRams.Sum(ram => ram.SIZE ?? 0)
        //         })
        //     .OrderBy(pcWithRam => pcWithRam.TotalRamCapacity)
        //     .ToListAsync();

        var allRam = await context.Memory_RAM.Where(ram => ram.SIZE <= 8).ToListAsync();
        Console.WriteLine(allRam.Count());

        // var pcsWithTotalRam = await context.PC
        //     .Where(pc => pc.MemoryRams.Any(ram => ram.SIZE != null && ram.SIZE > 0))
        //     .Select(pc => new
        //         {
        //             TotalRamCapacity = pc.MemoryRams.Sum(ram => ram.SIZE ?? 0)
        //         })
        //     .OrderBy(pcWithRam => pcWithRam.TotalRamCapacity)
        //     .ToListAsync();

        // if (pcsWithTotalRam is not null)
        // {
        //     foreach (var ramItem in pcsWithTotalRam)
        //     {
        //         if (ramItem.TotalRamCapacity <= 8) ram8++;
        //         else if (ramItem.TotalRamCapacity <= 12) ram12++;
        //         else ram16++;
        //     }
        //     nullRAM = false;
        // }

        

    //     pieStorage = new DataItem[] {
    //     new DataItem
    //     {
    //         Category = "< 10%",
    //         AvailableStorage = pc50
    //     },
    //     new DataItem
    //     {
    //         Category = "11-40%",
    //         AvailableStorage = pc50_100
    //     },
    //     new DataItem
    //     {
    //         Category = "> 40%",
    //         AvailableStorage = pc100
    //     }

    // };
        StartPieChart(storage15, storage11_40, storage40);
        //StartDoughnutChart(ram8, ram12, ram16);

    }
    // class DataItem
    // {
    //     public string Category { get; set; }
    //     public int AvailableStorage { get; set; }
    // }

    public void NavigateToPc(Guid Guid)
    {
        NavigationManager.NavigateTo("/pcDetails/" + Guid);
    }

    public void StartPieChart(int value1, int value2, int value3)
    {
        _pieConfig = new PieConfig();
        _pieConfig.Options = new PieOptions
            {
                Responsive = true,
                // Title = new OptionsTitle
                // {
                //     Display = true,
                //     Text = "Almacenamiento Disponible"
                // }

                OnClick = new DelegateHandler<ChartMouseEvent>(OnClickHandler),
                Legend = new ChartJs.Blazor.Common.Legend
                {
                    Position = Position.Right
                }
            };

        foreach (var color in new[] { "<10%", "11-40%", ">40%" })
        {
            _pieConfig.Data.Labels.Add(color);
        }
        PieDataset<int> dataset = new PieDataset<int>(new[] { value1, value2, value3 })
            {
                BackgroundColor = new[]
                                    {
            ColorUtil.ColorHexString(255, 0, 0), // Slice 1 
            ColorUtil.ColorHexString(255, 155, 0), // Slice 2 
            ColorUtil.ColorHexString(49, 147, 225), // Slice 3 
        }
            };

        _pieConfig.Data.Datasets.Add(dataset);

    }
    public void StartDoughnutChart(int value1, int value2, int value3)
    {
        _doughtConfig = new PieConfig(useDoughnutType: true);
        _doughtConfig.Options = new PieOptions()
            {
                Responsive = true,
                // Title = new OptionsTitle
                // {
                //     Display = true,
                //     Text = "Grafica de dona"
                // },
                OnClick = new DelegateHandler<ChartMouseEvent>(OnClickHandler),
                Legend = new Legend
                {
                    Position = Position.Right
                }

            };
        foreach (var color in new[] { "<8GB", "8-12GB", ">12GB" })
        {
            _doughtConfig.Data.Labels.Add(color);
        }
        PieDataset<int> dataset = new PieDataset<int>(new[] { value1, value2, value3 })
            {
                BackgroundColor = new[]
                                    {
            ColorUtil.ColorHexString(255, 0, 0), // Slice 1 
            ColorUtil.ColorHexString(255, 155, 0), // Slice 2 
            ColorUtil.ColorHexString(49, 147, 225), // Slice 3 
        }
            };

        _doughtConfig.Data.Datasets.Add(dataset);

    }
    //Metodo que toma el click de la rebana del pastel
    public void OnClickHandler(JObject mouseEvent, JArray activeElements)
    {
        foreach (JObject elem in activeElements)
        {
            foreach (JProperty prop in elem.GetValue("_model"))
            {
                if (prop.Name.Equals("label"))
                {
                    NavigationManager.NavigateTo("/devices/availablestorage/" + prop.Value.ToString());
                    // Console.WriteLine(prop.Value.ToString());
                }
            }
        }
    }


}