@page "/devices"
@using Microsoft.AspNetCore.Components.QuickGrid


<PageTitle>Equipos - Project Tescatlipoca</PageTitle>

@* <h1 style="padding-left: 5px; margin:3.625rem 0 1rem .25rem; ">Equipos</h1> *@


<div class="container shadow">

    <div class="grid-controlers-header">


        <div class="grid-controlers-header-left @computerStatusStyles">
            <button @onclick="ShowStatus">
                Todos
            </button>
            <span class="bi bi-plus"></span>

        </div>



    </div>

    <div class="grid ">
        <QuickGrid Items="@computersData" Theme="tescat" Pagination="@pagination">


            @if (computerStatusCircles)
            {
                <TemplateColumn Title="" Align="Align.Center" SortBy="@sortUserId" Class="first-column status">
                    <svg width='20' height='20'>
                        <circle cx='10' cy='10' r='7.5' fill='@(computerStatusColor(context.ID_USER))' />
                    </svg>
                </TemplateColumn>
            }

            <PropertyColumn Align=Align.Left Property="@(c => c.PC_NAME)" Sortable="true" Title="Equipo" Class="first-column">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="computerNameFilter" @bind:event="oninput" />
                    </div>c
                </ColumnOptions>
            </PropertyColumn>


            <PropertyColumn Align=Align.Left Property="@(c => LongDateFormat(c.LAST_MAINT))" Sortable="true" Title="Ultimo Mantenimiento" Class="mantt-date" />


            <PropertyColumn Align="Align.Center" Property="@(c => ComputerUser(c.ID_USER))" Sortable="true" Title="Usuario" Class="user-name" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="userNameFilter" @bind:event="oninput" />
                    </div>
                </ColumnOptions>
            </PropertyColumn>


            <PropertyColumn Align=Align.Center Property="@(c => c.PC_TYPE)" Sortable="true" Title="Tipo" />


            <PropertyColumn Align=Align.Center Property="@(c => ComputerOffice(c.ID_USER))" Sortable="true" Title="Oficina" />

            <PropertyColumn Align=Align.Center Property="@(c => ComputerAnyDeskID(c.ID_PC))" Sortable="true" Title="ID Anydesk" />


            @*
            <PropertyColumn Align=Align.Center Property="@(c => c.IP)" Sortable="true" Title="Direccion IP" /> *@

        </QuickGrid>




    </div>



    <div class="paginator-container">
        <div class="paginator-content">


            <Paginator State="@pagination" />

            <div class="page-size-chooser">
                Equipos por pagina:
                <select @bind="@pagination.ItemsPerPage">
                    <option>6</option>
                    <option>12</option>
                    <option>18</option>
                    <option>24</option>
                    <option>30</option>
                    <option>36</option>
                    <option>42</option>
                    <option>48</option>
                </select>
            </div>


        </div>
    </div>




</div>

@* <a href="anydesk:340271832">340 271 832</a>

 *@
@code {

    IQueryable<UserPC>? allComputersList { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };


    private List<UserPC>? Computers { get; set; }
    private List<User>? Users { get; set; }
    private List<ComputerCredentials>? Credentials { get; set; }

    string? computerNameFilter;
    string? userNameFilter;

    bool computerStatusCircles = false;
    string? computerStatusStyles;



    IQueryable<UserPC> computersData
    {
        get
        {
            var result = allComputersList;

            // displaying just active users
            result = (result != null && !computerStatusCircles) ? result.Where(c => c.ID_USER != null && c.ID_USER != 0) : result;

            if (!string.IsNullOrEmpty(userNameFilter))
            {
                result = result.Where(c =>
                ComputerUser(c.ID_USER).Contains(userNameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            if (!string.IsNullOrEmpty(computerNameFilter))
            {
                result = result.Where(c =>
               c.PC_NAME.Contains(computerNameFilter,
                   StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }



    GridSort<UserPC> sortUserId = GridSort<UserPC>
       .ByAscending(p => p.ID_USER)
       .ThenDescending(p => p.ID_USER);

    private void ShowStatus()
    {
        computerStatusCircles = !computerStatusCircles;
        if (!computerStatusCircles)
        {
            computerStatusStyles = "disabled";
        }
        else
        {
            computerStatusStyles = "enabled";
        }

    }


    string computerStatusColor(int? userId)
    {
        return userId.HasValue ? "#3ba28f" : "#e32044";
    }




    string LongDateFormat(DateTime? date)
    {
        if (date.HasValue)
        {
            CultureInfo culture = new CultureInfo("es-MX");
            TextInfo textInfo = culture.TextInfo;

            string formattedDate = date.Value.ToString("dd MMMM yyyy", culture);

            return textInfo.ToTitleCase(formattedDate);
        }
        else
        {
            return string.Empty;
        }
    }



    string ComputerUser(int? userId)
    {
        if (userId.HasValue && Users != null)
        {
            var user = Users.FirstOrDefault(u => u.ID_USER == userId);
            return user?.NAME ?? "INACTIVO";
        }

        return "";
    }


    string ComputerOffice(int? userId)
    {
        if (userId.HasValue && Users != null)
        {
            var user = Users.FirstOrDefault(u => u.ID_USER == userId);
            return user?.OFFICE ?? "";
        }

        return "";
    }


    string ComputerAnyDeskID(Guid? computerId)
    {
        if (computerId.HasValue && Credentials != null)
        {
            var id = Credentials.FirstOrDefault(u => u.ID_PC == computerId);
            return id?.ID_ANYDESK ?? "";
        }


        return "";
    }




    protected override async
    Task OnInitializedAsync()
    {
        try
        {
            using var context = ContextFactory.CreateDbContext();

            await GetAllComputers(context);
            await GetAllUsers(context);
            await GetAllCredentials(context);

            if (Computers is not null)
            {
                allComputersList = Computers.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hubo un problema al cargar la informacion de los usuarios{ex.Message}");
        }
    }


    private async
     Task GetAllComputers(MainDbContext context) => Computers = await context.PC.ToListAsync();


    private async
    Task GetAllCredentials(MainDbContext context) => Credentials = await context.PC_Credentials.ToListAsync();


    private async
    Task GetAllUsers(MainDbContext context) => Users = await context.Users.ToListAsync();





}
